# অবজেক্ট ওরিয়েন্টেড প্রোগ্রামিং
# এর আগে চ্যাপ্টার গুলোতে দু ধরনের প্রোগ্রামিং কনসেপ্ট দেখানো হয়েছে। ইম্পারেটিভ এবং ফাংশনাল। বিভিন্ন স্টেটমেন্ট, লুপ, ফাংশন এবং সাবরুটিন ব্যবহার করে সাধারণ প্রোগ্রামিং -কে ইম্পারেটিভ প্রোগ্রামিং বলা হয়ে থাকে। আবার পিউর ফাংশন, হাইয়ার অর্ডার ফাংশন, রিকারসন ব্যবহার করে যে ধরনের প্রোগ্রামিং করা হয় তাকে ফাংশনাল প্রোগ্রামিং বলা হয়ে থাকে।
# ঠিক এরকম আরেকটি প্রোগ্রামিং কন্সেপ্ট/স্টাইল/ধরন এর নাম হচ্ছে অবজেক্ট ওরিয়েন্টেড প্রোগ্রামিং। এই কনসেপ্টের সাথে ক্লাস এবং অবজেক্ট এর সম্পর্ক ওতপ্রোত ভাবে জড়িত।

# # ক্লাস

#  এই চ্যাপ্টারটি সর্বশেষ হালনাগাদ হয়েছেঃ সময়ে

# খুব সহজ ভাবে বলতে গেলে ক্লাস হচ্ছে এক ধরনের টেম্পলেট বা ব্লুপ্রিন্ট যার উপর ভিত্তি করে অনেক গুলো আলাদা আলাদা অবজেক্ট তৈরি করা সম্ভব। উদাহরণ সরূপ, যদি কখনো এমন প্রয়োজন হয় যে, একটি গেম ডেভেলপ করা দরকার এবং সেটায় বেশ কিছু দৈত্য, দানব থাকবে এবং সেগুলোকে একটা নায়ক চরিত্র ধ্বংস করে গেম ওভার করবে।
# এরকম একটা গেম ডিজাইনে অবজেক্ট ওরিয়েন্টেড কনসেপ্ট খুবি উপকারী হতে পারে। যেমন, প্রথমেই সাধারণ একটা দৈত্য কেমন হয় তার উপর ভিত্তি করে একটা টেম্পলেট বা ব্লুপ্রিন্ট বানানো যেতে পারে। এরপর, গেমের প্রয়োজনে যতগুলো ভিন্ন ভিন্ন দৈত্য চরিত্র দরকার পরবে আমরা সেই টেম্পলেট ব্যবহার করে এবং দরকার হলে টুকটাক পরিবর্তন করে তত গুলো ভিন্ন ভিন্ন দৈত্য চরিত্র তৈরি করে নিতে পারবো।
# মজার ব্যাপার হচ্ছে আমাদের তৈরি করা দৈত্য গুলোর কম্পিউটার মেমোরিতে আলাদা আলাদা অস্তিত্ব থাকবে। অর্থাৎ সেগুলো স্বাধীন এক একটা দৈত্য যাদের সবার মধ্যে মুল জিনিষ গুলোতে মিল আছে (যেহেতু একই টেম্পলেট থেকে তৈরি করা) এবং আলাদা আলাদা কিছু বৈশিষ্ট্য এবং আচরণও আছে।

# এই যে একটা দৈত্য বানানোর টেম্পলেট যেখান থেকে অনেক গুলো দৈত্য চরিত্র তৈরি করা যায়, সেটাকে বলা হয় ক্লাস। আর সেই ক্লাস ব্যবহার করে তৈরি করা আলাদা আলাদা দৈত্য চরিত্র গুলোকে বলা হয় অবজেক্ট।

# class কিওয়ার্ড ব্যবহার করে পাইথনে ক্লাস তৈরি করা হয়, একটি ক্লাসের মধ্যে বিভিন্ন মেথড(ফাংশন) এবং অ্যাট্রিবিউট (প্রপার্টি) থাকতে পারে যেগুলো পাইথনের নিয়ম অনুযায়ী ইন্ডেন্টেড ব্লকের মধ্যে থাকে।

#The blueprint to create monsters
class Monster:
    def __init__(self, color, heads):
        self.color = color
        self.heads = heads

#Create a some real monsters 
fogthing = Monster("Black", 5)
mournsnake = Monster("Yellow", 4)
tangleface = Monster("Red", 3)

#Check wheter those monsters got differents existence in memory or not 
print("I have" + str(fogthing.heads) + 'heads and I\'m' " " + mournsnake.color)
print('I also have ' + str(mournsnake.heads) + 'heads and I\'m' " " + fogthing.color)
print('I got ' + str(tangleface.heads) + "heads and I\'m" " " + tangleface.color)


# উপরে প্রথমেই একটি ক্লাস (আমাদের ভাষায় ব্লুএপ্রিন্ট বা টেম্পলেট) তৈরি করা হয়েছে। এর মধ্যে একটি ম্যাজিক মেথড আছে __init__ (যেটা নিয়ে নিচে আলোচনা আছে) এবং এর দুটো অ্যাট্রিবিউট আছে color ও heads এবং এই ক্লাসকে ব্যবহার করে বা ইন্সট্যান্টশিয়েট করে ৩টি অবজেক্ট তৈরি করা হয়েছে যেগুলো কিনা নিজেরা আলাদা আলাদা।

# __init__ মেথড

# এই মেথডটি যেকোনো ক্লাসের খুবি গুরুত্বপূর্ণ একটি মেথড। যখনি কোন ক্লাস থেকে কোন অবজেক্ট বা ইন্সট্যান্স তৈরি করা হয় তখনি এই মেথডটি স্বয়ংক্রিয় ভাবে কল হয়। ক্লাসের মেথডের ক্ষেত্রে আরেকটি গুরুত্বপূর্ণ বিষয় হচ্ছে - সব মেথডের প্রথম প্যারামিটারটি হতে হয় self. যদিও এই মেথড গুলোকে কল করার সময় নির্দিষ্ট করে এই আর্গুমেন্টটি পাঠাতে হয় না (পাইথন নিজে থেকেই এটা ম্যানেজ করে)।

# বস্তুত এই self, ওই মেথডকে কল করা ইন্সট্যান্সটিকেই নির্দেশ করে। অর্থাৎ, উপরের উদাহরণ অনুযায়ী যখন fogthing = Monster("Black", 5) লিখে fogthing নামের একটি অবজেক্ট তৈরি করা হচ্ছে। তখন কিন্তু __init__ কল হচ্ছে স্বয়ংক্রিয় ভাবে। আর এই __init__ মেথডের কাছে প্রথম আর্গুমেন্ট self হিসেবে চলে যাচ্ছে এই fogthing ইন্সট্যান্সটি। আর ওই মেথডের ডেফিনেশনের মধ্যে সেই self এর দুটো অ্যাট্রিবিউট color এবং heads কে সেট করা হচ্ছে (এর কাছে আসা দ্বিতীয় ও তৃতীয় আর্গুমেন্ট এর ভ্যালু নিয়ে)। তাহলে পক্ষান্তরে কিন্তু fogthing অবজেক্ট এর দুটো অ্যাট্রিবিউট সেট হয়ে গেলো অবজেক্ট তৈরির সাথে সাথেই।

# আর সাধারণ ভাবেই,


print('I have ' + str(fogthing.heads) + ' heads and I\'m ' + fogthing.color)


# স্টেটমেন্টের মাধ্যমে fogthing.heads সিনট্যাক্স ব্যবহার করে এর অ্যাট্রিবিউটকে অ্যাক্সেস করা হচ্ছে।

# dot চিহ্ন ব্যবহার করে একটি অবজেক্টের অ্যাট্রিবিউট এবং মেথড গুলোকে অ্যাক্সেস করা হয়। __init__ মেথড কে কন্সট্রাক্টর বলা হয়

# ক্লাসের অন্যান্য মেথড

# আগেই বলা হয়েছে ক্লাস হচ্ছে এক ধরনের ব্লুপ্রিন্ট যাকে ব্যবহার করে বিভিন্ন অবজেক্ট বা ইন্সট্যান্স তৈরি করা যায়। এখন, বাস্তবে একটি অবজেক্ট (উদাহরণ অনুযায়ী দৈত্য চরিত্র গুলো) এর যেমন কিছু বৈশিষ্ট্য (অ্যাট্রিবিউট - color, heads) থাকে, তেমনি কিছু কার্যকলাপ বা সক্রিয়তা থাকে। তো, ক্লাস তথা ব্লুপ্রিন্টের মধ্যে সেগুলোকে মেথড হিসেবে ডিফাইন করা হয়।

# উদাহরণ,

class Monster:
    def __init__(self, color, heads):
        self.color = color
        self.heads = heads

    def attack(self):
        print("Just attacked a Hero, Mu...hahahaha!!!")

# Create an instance/object/monster-character
mournsnake = Monster("Yellow", 4)
# Check if its created or not
print('I am a ' + str(mournsnake.heads) + ' headed monster.')
# Make an attack by the new monster
mournsnake.attack()